name: build

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop, 'feature/**']
  workflow_dispatch:
    branches: [main, develop, 'feature/**']

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      build_timestamp: ${{steps.timestamp.outputs.timestamp}}
      build_moniker: ${{steps.moniker.outputs.moniker}}
      build_id: R5.1.0_BUILD_${{github.run_number}}_${{steps.moniker.outputs.moniker}}_${{steps.timestamp.outputs.timestamp}}
    steps:
      - name: configure build id
        id: timestamp
        run: echo "timestamp=$(date -u +'%Y%m%d%H%M')" >> "$GITHUB_OUTPUT"

      - name: configure release build moniker
        id: moniker
        if: github.ref_name == 'main'
        run: echo "moniker=RELEASE" >> "$GITHUB_OUTPUT"

      - name: configure preview build moniker
        id: moniker
        if: github.ref_name == 'develop'
        run: echo "moniker=PREVIEW" >> "$GITHUB_OUTPUT"

      - name: configure feature build moniker
        id: moniker
        if: (github.ref_name != 'main') && (github.ref_name != 'develop')
        run: echo "moniker=FEATURE" >> "$GITHUB_OUTPUT"

  build:
    needs: configure
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: install (linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake pandoc ninja-build libxrandr-dev libxinerama-dev libxcursor-dev libasound2-dev libcurl4-openssl-dev

      - name: install (windows)
        if: matrix.os == 'windows-latest'
        run: choco install pandoc

      - name: install (macos)
        if: matrix.os == 'macos-latest'
        run: brew install pandoc

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: build (linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd linux
          ./build.sh

      - name: build (windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd windows
          ./build.ps1

      - name: build (macos)
        if: matrix.os == 'macos-latest'
        run: |
          cd macos
          ./build.sh

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: ${{needs.configure.outputs.build_id}}
          path: linux/build/artifacts/*

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: ${{needs.configure.outputs.build_id}}
          path: windows/build/artifacts/*

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-latest'
        with:
          name: ${{needs.configure.outputs.build_id}}
          path: macos/build/artifacts/*
  release:
    needs: [configure, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{needs.configure.outputs.build_id}}
          path: ${{runner.workspace}}/artifacts

      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "${{needs.configure.outputs.build_id}}"
          prerelease: true
          files: ${{runner.workspace}}/artifacts/*
